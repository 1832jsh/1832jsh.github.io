<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>DIGITAL Personal Workstation <EM>a/au-Series</EM> Address Configuration</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<!-- Created Using HTML Notepad, Copyright (c) cranial software 1995-->
<!-- This file created by Carmen Wheatcroft-->
<!--  Workstation Doc Group - Digital Equipment Corporation Copyright (c) 1998-->

<H3><A NAME="top_addr">Address Configuration</A></H3>

<P>This section covers the following topics:</P>

<UL>
<LI><A HREF="co_admap.htm#adr_over">Address space overview.</A> </LI>
<!-- <LI>Translation of processor-initiated addresses into PCI addresses. </LI>
<LI>Translation of a PCI address into a physical memory address. </LI>
<LI>Dense and sparse address space. </LI>
<LI>Scatter/gather address translation for DMA operations. </LI>-->
<LI><A HREF="#pci_addr_space">PCI address space.</A> </LI>
<LI><A HREF="#cpu_adr_space">CPU address space.</A></LI>
</UL>

<HR>
<TABLE border=0 width=100%>
<TR><TD align=left><H3><A NAME="adr_over"></A>Address Space Overview</H3></TD>
<TD align=right valign=top><A HREF="#top_addr"><IMG SRC="../images/top_butn.gif" 
WIDTH=75 HEIGHT=20 border=0></A></TD></TR>
</TABLE>

<P>The EV5 address space is divided into two regions using physical address
bit [39]. If the address space is clear, then the CPU is accessed to the cached memory space. If it is set, then the accesses are not cached. The uncached space is used to access
memory-mapped I/O devices. Mailboxes are not supported. The uncached space
contains the CSRs, uncached memory access (for diagnostics), and the PCI
address space. The PCI defines three physical address spaces: </P>

<OL>
<LI>64-bit PCI memory space </LI>

<LI>4-GB PCI I/O space </LI>

<LI>256 byte per device PCI configuration space </LI>
</OL>

<P>In addition to the three PCI address spaces, the CPU's uncached space
also is used to generate PCI Interrupt Acknowledge and Special Cycles.</P>

<P>The system can perform two modes of addressing: <A HREF="co_admap.htm#byte_dis">byte/word
disabled (0)</A> and <A HREF="co_admap.htm#byte_ena">byte/word enabled
(1).</A> The mode is controlled by bit 0 (IOA_BEN) of the PYXIS_CTRL1
CSR.</P>

<P><A NAME="byte_dis"></A><B>Physical Address Map with Byte/Word Mode Disabled</B></P>

<TABLE BORDER=1 >
<TR>
<TH>CPU Address</TH>

<TH>Size<BR>
(GB)</TH>

<TH>Selection</TH>
</TR>

<TR>
<TD><TT>00.0000.0000 - 01.FFFF.FFFF</TT></TD>

<TD align=center>8</TD>

<TD>Main Memory</TD>
</TR>

<TR>
<TD><TT>0E.0000.0000 - 0E.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>Dummy Memory Region</TD>
</TR>

<TR>
<TD><TT>80.0000.0000 - 83.FFFF.FFFF</TT></TD>

<TD align=center>16</TD>

<TD>PCI Sparse Memory Region 0, 512-MB</TD>
</TR>

<TR>
<TD><TT>84.0000.0000 - 84.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>PCI Sparse Memory Region 1, 128-MB</TD>
</TR>

<TR>
<TD><TT>85.0000.0000 - 85.7FFF.FFFF</TT></TD>

<TD align=center>2</TD>

<TD>PCI Sparse Memory Region 2, 64-MB</TD>
</TR>

<TR>
<TD><TT>85.8000.0000 - 85.BFFF.FFFF</TT></TD>

<TD align=center>1</TD>

<TD>PCI Sparse I/O Space Region A, 32-MB</TD>
</TR>

<TR>
<TD><TT>85.C000.0000 - 85.FFFF.FFFF</TT></TD>

<TD align=center>1</TD>

<TD>PCI Sparse I/O Space Region B, 32-MB</TD>
</TR>

<TR>
<TD><TT>86.0000.0000 - 86.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>PCI Dense Memory</TD>
</TR>

<TR>
<TD><TT>87.0000.0000 - 87.1FFF.FFFF</TT></TD>

<TD align=center>0.5</TD>

<TD>PCI Sparse Configuration Space</TD>
</TR>

<TR>
<TD><TT>87.2000.0000 - 87.3FFF.FFFF</TT></TD>

<TD align=center>0.5</TD>

<TD>PCI Special/Int. Ack</TD>
</TR>

<TR>
<TD><TT>87.4000.0000 - 87.4FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Main CSRs</TD>
</TR>

<TR>
<TD><TT>87.5000.0000 - 87.5FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Memory Control CSRs</TD>
</TR>

<TR>
<TD><TT>87.6000.0000 - 87.6FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS PCI Address Translation</TD>
</TR>

<TR>
<TD><TT>87.7000.0000 - 87.7FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>Reserved</TD>
</TR>

<TR>
<TD><TT>87.8000.0000 - 87.8FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Miscellaneous CSRs</TD>
</TR>

<TR>
<TD><TT>87.9000.0000 - 87.9FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Power Management CSRs</TD>
</TR>

<TR>
<TD><TT>87.A000.0000 - 87.AFFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Interrupt Control CSRs</TD>
</TR>

<TR>
<TD><TT>87.B000.0000 - 87.FFFF.FFFF</TT></TD>

<TD align=center>1.25</TD>

<TD>Reserved</TD>
</TR>

<TR>
<TD colspan=3><B>Note 1:</B> All addresses in the range of 80.0000.0000
and 8F.FFFF.FFFF are aliased.  Address bits 36 through 38 are ignored in
the address.</TD>
</TR>
</TABLE>

<P><A NAME="byte_ena"></A><B>Physical Address Map with Byte/Word Mode Enabled</B></P>

<TABLE BORDER=1 >
<TR>
<TH>CPU Address</TH>

<TH>Size<BR>
(GB)</TH>

<TH>Selection</TH>
</TR>

<TR>
<TD><TT>00.0000.0000 - 01.FFFF.FFFF</TT></TD>

<TD align=center>8</TD>

<TD>Main Memory</TD>
</TR>

<TR>
<TD><TT>0E.0000.0000 - 0E.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>Dummy Memory Region</TD>
</TR>

<TR>
<TD><TT>80.0000.0000 - 83.FFFF.FFFF</TT></TD>

<TD align=center>16</TD>

<TD>PCI Sparse Memory Region 0, 512-MB</TD>
</TR>

<TR>
<TD><TT>84.0000.0000 - 84.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>PCI Sparse Memory Region 1, 128-MB</TD>
</TR>

<TR>
<TD><TT>85.0000.0000 - 85.7FFF.FFFF</TT></TD>

<TD align=center>2</TD>

<TD>PCI Sparse Memory Region 2, 64-MB</TD>
</TR>

<TR>
<TD><TT>85.8000.0000 - 85.BFFF.FFFF</TT></TD>

<TD align=center>1</TD>

<TD>PCI Sparse I/O Space Region A, 32-MB</TD>
</TR>

<TR>
<TD><TT>85.C000.0000 - 85.FFFF.FFFF</TT></TD>

<TD align=center>1</TD>

<TD>PCI Sparse I/O Space Region B, 32-MB</TD>
</TR>

<TR>
<TD><TT>86.0000.0000 - 86.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>PCI Dense Memory</TD>
</TR>

<TR>
<TD><TT>87.0000.0000 - 87.1FFF.FFFF</TT></TD>

<TD align=center>0.5</TD>

<TD>PCI Sparse Configuration Space</TD>
</TR>

<TR>
<TD><TT>87.2000.0000 - 87.3FFF.FFFF</TT></TD>

<TD align=center>0.5</TD>

<TD>PCI Special/Int. Ack</TD>
</TR>

<TR>
<TD><TT>87.4000.0000 - 87.4FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Main CSRs</TD>
</TR>

<TR>
<TD><TT>87.5000.0000 - 87.5FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Memory Control CSRs</TD>
</TR>

<TR>
<TD><TT>87.6000.0000 - 87.6FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS PCI Address Translation</TD>
</TR>

<TR>
<TD><TT>87.7000.0000 - 87.7FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>Reserved</TD>
</TR>

<TR>
<TD><TT>87.8000.0000 - 87.8FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Miscellaneous CSRs</TD>
</TR>

<TR>
<TD><TT>87.9000.0000 - 87.9FFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Power Management CSRs</TD>
</TR>

<TR>
<TD><TT>87.A000.0000 - 87.AFFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>PYXIS Interrupt Control CSRs</TD>
</TR>

<TR>
<TD><TT>87.B000.0000 - 87.BFFF.FFFF</TT></TD>

<TD align=center>0.25</TD>

<TD>Reserved</TD>
</TR>

<TR>
<TD><TT>88.0000.0000 - 88.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>PCI Memory Space int8</TD>
</TR>

<TR>
<TD><TT>98.0000.0000 - 98.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI Memory Space int4</TD>
</TR>

<TR>
<TD><TT>A8.0000.0000 - A8.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI Memory Space int2</TD>
</TR>

<TR>
<TD><TT>B8.0000.0000 - B8.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI Memory Space int1</TD>
</TR>

<TR>
<TD><TT>89.0000.0000 - 89.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>PCI I/O Space int8</TD>
</TR>

<TR>
<TD><TT>99.0000.0000 - 99.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI I/O Space int4</TD>
</TR>

<TR>
<TD><TT>A9.0000.0000 - A9.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI I/O Space int2</TD>
</TR>

<TR>
<TD><TT>B9.0000.0000 - B9.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI I/O Space int1</TD>
</TR>

<TR>
<TD><TT>8A.0000.0000 - 8A.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>PCI Configuration Space, type 0, int8</TD>
</TR>

<TR>
<TD><TT>9A.0000.0000 - 9A.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI Configuration Space, type 0, int4</TD>
</TR>

<TR>
<TD><TT>AA.0000.0000 - AA.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI Configuration Space, type 0, int2</TD>
</TR>

<TR>
<TD><TT>BA.0000.0000 - BA.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI Configuration Space, type 0, int1</TD>
</TR>

<TR>
<TD><TT>8B.0000.0000 - 8B.FFFF.FFFF</TT></TD>

<TD align=center>4</TD>

<TD>PCI Configuration Space, type 1, int8</TD>
</TR>

<TR>
<TD><TT>9B.0000.0000 - 9B.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI Configuration Space, type 1, int4</TD>
</TR>

<TR>
<TD><TT>AB.0000.0000 - AB.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI Configuration Space, type 1, int2</TD>
</TR>

<TR>
<TD><TT>BB.0000.0000 - BB.FFFF.FFFF</TT> (1)</TD>

<TD align=center>4</TD>

<TD>PCI Configuration Space, type 1, int1</TD>
</TR>

<TR>
<TD><TT>C7.C000.0000 - C7.FFFF.FFFF</TT> (2)</TD>

<TD align=center>1</TD>

<TD>Flash ROM Read/Write Space</TD>
</TR>

<TR>
<TD colspan=3><B>Note 1:</B> Address bits 37 and 38 are generated by the
EV56 and not by software. Address bits 37 and 38 are used by the EV56 to
indicate to external hardware that this transaction is a byte, word, longword, or quadword operation.<BR>
<B>Note 2: </B>Read/write to Flash ROM must be done with byte transactions
to address range 87.C000.0000 through 87.FFFF.FFFF. All other accesses
will produce undefined results.</TD>
</TR>
</TABLE>

<P>The CPU has visibility to the complete address space.  It can access
cached memory, CSRs as well as all the PCI memory, I/O and configuration
regions.  See Figure 3-1.</P>

<P>The PCI devices have a restricted view of the address space.  They can
access any PCI device through the PCI memory or PCI I/O space; but they
have no access to the PCI configuration space. Furthermore, the system
restricts access to the system memory (for DMA operations) through five,
programmable &quot;windows&quot; (that is, memory regions) in the PCI memory
space.  See the figure.</P>

<P><IMG SRC="../images/adr_over.gif" HEIGHT=293 WIDTH=400> </P>

<P>DMA access to the system memory is achieved through &quot;windows&quot;
in one of three ways: </P>

<OL>
<LI>Directly using the Monster Window with Dual Address Cycles where PCI
address &lt;33:0&gt; equals memory address &lt;33:0&gt;.</LI>

<LI>Directly mapped by concatenating an offset to a portion of the PCI
address.</LI>

<LI>Virtually through a scatter/gather translation map.</LI>
</OL>

<P>The scatter/gather map allows any 8-KB PCI memory address region (page)
to be re-directed to any 8-KB cached memory page, as shown below.</P>

<P><IMG SRC="../images/mem_map.gif" HEIGHT=293 WIDTH=400> </P>

<HR>
<TABLE border=0 width=100%>
<TR><TD align=left><H3><A NAME="pci_addr_space"></A>PCI address Space</H3></TD>
<TD align=right valign=top><A HREF="#top_addr"><IMG SRC="../images/top_butn.gif" 
WIDTH=75 HEIGHT=20 border=0></A></TD></TR>
</TABLE>

<P>The system generates 32-bit PCI addresses but accepts both 64-bit address
(double address cycle [DAC] ) cycles and 32-bit PCI address (single address
cycle [SAC] ) cycles.  The process of accessing main memory is as outlined next: </P>

<UL>
<LI>Window [4], the Monster Window, gives full access to main memory. It
is accessed by DAC only with PCI address&lt;40&gt; set. Memory address&lt;33:0&gt;
equals PCI address &lt;33:0&gt;.</LI>

<LI>Window [3] can be either DAC or SAC, but not both. If it is DAC, PCI address
&lt;63:40&gt; must be zero, PCI address &lt;39:32&gt; must match the DAC
register, and PCI address &lt;31:0&gt; must hit in Window [3].</LI>

<LI>Windows [2:0] are SAC-only.</LI>
</UL>

<P>When the system is initialized by the SROM code, the windows are configured
as follows:</P>

<TABLE BORDER=1 >
<TR>
<TH>PCI Window</TH>

<TH>Assignment</TH>

<TH>Size</TH>

<TH align=center>Comments </TH>
</TR>

<TR>
<TD align=center>0 </TD>

<TD>Scatter/Gather</TD>

<TD>8-MB</TD>

<TD>Not used by firmware. MEMCS disabled</TD>
</TR>

<TR>
<TD align=center>1 </TD>

<TD>Direct Mapped</TD>

<TD>1GB</TD>

<TD>Mapped to 0 to 1-GB of main memory</TD>
</TR>

<TR>
<TD align=center>2 </TD>

<TD colspan=3 align=center>Disabled </TD>
</TR>

<TR>
<TD align=center>3 </TD>

<TD colspan=3  align=center>Disabled </TD>
</TR>
</TABLE>
<P></P>

<HR>
<TABLE border=0 width=100%>
<TR><TD align=left><H3><A NAME="cpu_adr_space"></A>CPU Address Space</H3></TD>
<TD align=right valign=top><A HREF="#top_addr"><IMG SRC="../images/top_butn.gif" 
WIDTH=75 HEIGHT=20 border=0></A></TD></TR>
</TABLE>

<P>The following figure shows an overview of the mapping of the 40-bit
processor physical address space into memory and I/O space addresses:</P>

<PRE>     39      34 33 32 31
+---+---+---+--+--+--+--+------------------------------+
|   |   |SBZ|  |  |  |  |                              |
+---+---+---+--+--+--+--+------------------------------+
      /\- - - - - - - - - +--------+
      |      0   0  x  x  |        |  8-GB Cached
      |                   +--------+      Memory
      |                   |        |
 &lt;39&gt;=0= Cached           |Reserved|
      |  Memory           |        |
      |  Space            |        |
      |                   |        |
      |                   |        |
      \/                  |        |
      - - - - - - - - - - +--------+ - - - - - - 
      /\     0   x  x  x  |        | 80.0000.0000   /\
      |                   |        |                 |
      |                   | 16-GB   |                 |
      |                   |        |            PCI Memory
      |                   |        |            Sparse Space
      |                   |        |            704-MB Max
      |                   +--------+                 |
      |      1   0  0  x  |  4-GB   | 84.0000.0000    |
 &lt;39&gt;=1= Uncached         |        |                 |
      |  I/O Space        +--------+                 |
      |      1   0  1  0  |  2-GB   | 85.0000.0000   \/
      |                   +--------+ - - - - - - -- - -
      |      1   0  1  1  |        | 85.8000.0000 PCI Sparse
      |                   |        |              I/O 64-MB
      |                   +--------+
      |      1   1  0  x  |        | 86.0000.0000 PCI Dense
      |                   |        |              Memory 4-GB
      |                   +--------+
      \/     1   1  1  x  |        | 87.0000.0000 PCI Config
      - - - - - - - - - - +--------+              CSRs, and
                                                    flashROM</PRE>

<P>The preceding figure shows how the CPU address map translates to the PCI address
space as well as how the PCI accesses the CPU memory space through DMAs.
Notice how the PCI memory space is double-mapped by dense and
sparse space. The rationale behind the CPU I/O address map is as follows:
(1) To provide 4 GB of dense space to completely map the 32-bit PCI memory
space and (2) To provide abundant PCI sparse memory space since sparse-space
has byte granularity and is the safest memory-space to use (for example, no prefetching).
Furthermore, the larger the space, the less likely software will need to
dynamically relocate the sparse space segments. The main problem with sparse
space is that it wastes CPU address space (for example, 16 GB of CPU address
space maps to 512 MB of PCI sparse space). The system provides three PCI memory,
sparse-space regions, allowing 704 MB of total sparse memory space. The
three regions are relocatable through the HAE_MEM CSR, and the simplest configuration
allows for 704 MB of contiguous memory space. (a) 512 MB region, which may
be located in any naturally aligned 512-MB segment of the PCI memory space.
This region may be sufficient for software.  (b) 128-MB regions, which may be located on any naturally aligned 128-MB segment of the PCI memory space. (c) 64-MB region,
which may be located on any naturally aligned 64-MB segment of the PCI memory
space.   Limit the PCI I/O space to sparse space: although the PCI
I/O space can handle 4 GB, the Pentium chip can access only 64 KB. Consequently,
most, if not all, PCI devices will not exceed 64 KB for the foreseeable future.
The system provides 64 MB of sparse I/O space because the hardware decode
is faster.   The system provides two PCI IO sparse-space regions:
region A, which is 32 MB and is fixed in PCI segment 0-32 MB; and region
B, which is also 32 MB, but is relocatable using the HAE_IO register.  </P>

</BODY>
</HTML>
